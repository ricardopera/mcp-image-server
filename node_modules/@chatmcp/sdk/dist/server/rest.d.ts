import { IncomingMessage, ServerResponse } from "node:http";
import { Transport } from "@modelcontextprotocol/sdk/shared/transport.js";
import { JSONRPCMessage } from "@modelcontextprotocol/sdk/types.js";
/**
 * Configuration options for RestServerTransport
 */
export interface RestServerTransportOptions {
    endpoint?: string;
    port?: string | number;
}
/**
 * Server transport for Synchronous HTTP: a stateless implementation for direct HTTP responses.
 * It supports concurrent requests with no streaming, no SSE, and no persistent connections.
 *
 * Usage example:
 *
 * ```typescript
 * // Create a basic synchronous transport
 * const transport = new RestServerTransport({ endpoint: '/rest', port: '9593' });
 * await server.connect(transport);
 * await transport.startServer();
 * ```
 */
export declare class RestServerTransport implements Transport {
    private _started;
    private _endpoint;
    private _port;
    private _server;
    private _httpServer;
    private _pendingRequests;
    onclose?: () => void;
    onerror?: (error: Error) => void;
    onmessage?: (message: JSONRPCMessage) => void;
    constructor(options?: RestServerTransportOptions);
    /**
     * Start the HTTP server
     */
    startServer(): Promise<void>;
    /**
     * Stop the HTTP server
     */
    stopServer(): Promise<void>;
    /**
     * Starts the transport. This is required by the Transport interface but is a no-op
     * for the Synchronous HTTP transport as connections are managed per-request.
     */
    start(): Promise<void>;
    /**
     * Handles an incoming HTTP request
     */
    handleRequest(req: IncomingMessage, res: ServerResponse, parsedBody?: unknown): Promise<void>;
    /**
     * Handles POST requests containing JSON-RPC messages
     */
    private handlePostRequest;
    close(): Promise<void>;
    send(message: JSONRPCMessage): Promise<void>;
}
